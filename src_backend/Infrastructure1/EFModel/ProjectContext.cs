// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace Infrastructure.EFModel
{
    public partial class ProjectContext : DbContext
    {
        public ProjectContext()
        {
        }

        public ProjectContext(DbContextOptions<ProjectContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Adlisting> Adlisting { get; set; }
        public virtual DbSet<Admin> Admin { get; set; }
        public virtual DbSet<Appuser> Appuser { get; set; }
        public virtual DbSet<Breed> Breed { get; set; }
        public virtual DbSet<Card> Card { get; set; }
        public virtual DbSet<Descriptable> Descriptable { get; set; }
        public virtual DbSet<Location> Location { get; set; }
        public virtual DbSet<Messages> Messages { get; set; }
        public virtual DbSet<Period> Period { get; set; }
        public virtual DbSet<Person> Person { get; set; }
        public virtual DbSet<Pet> Pet { get; set; }
        public virtual DbSet<Pettype> Pettype { get; set; }
        public virtual DbSet<Review> Review { get; set; }
        public virtual DbSet<Session> Session { get; set; }
        public virtual DbSet<SiteContent> SiteContent { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Adlisting>(entity =>
            {
                entity.HasKey(e => e.IdAdListing)
                    .HasName("PK__ADLISTIN__5BB5B9E70002384A");

                entity.ToTable("ADLISTING");

                entity.HasIndex(e => e.IdAdListing, "UQ__ADLISTIN__5BB5B9E695395C83")
                    .IsUnique();

                entity.Property(e => e.IdAdListing).HasColumnName("idAdListing");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("description");

                entity.Property(e => e.IdDescriptable).HasColumnName("idDescriptable");

                entity.Property(e => e.IdLocation).HasColumnName("idLocation");

                entity.Property(e => e.IdPeriod).HasColumnName("idPeriod");

                entity.Property(e => e.Price).HasColumnName("price");

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(5000)
                    .IsUnicode(false)
                    .HasColumnName("userName");

                entity.HasOne(d => d.IdDescriptableNavigation)
                    .WithMany(p => p.Adlisting)
                    .HasForeignKey(d => d.IdDescriptable)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__ADLISTING__idDes__4222D4EF");

                entity.HasOne(d => d.IdLocationNavigation)
                    .WithMany(p => p.Adlisting)
                    .HasForeignKey(d => d.IdLocation)
                    .HasConstraintName("FK__ADLISTING__idLoc__440B1D61");

                entity.HasOne(d => d.IdPeriodNavigation)
                    .WithMany(p => p.Adlisting)
                    .HasForeignKey(d => d.IdPeriod)
                    .HasConstraintName("FK__ADLISTING__idPer__44FF419A");

                entity.HasOne(d => d.UserNameNavigation)
                    .WithMany(p => p.Adlisting)
                    .HasForeignKey(d => d.UserName)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__ADLISTING__userN__4316F928");
            });

            modelBuilder.Entity<Admin>(entity =>
            {
                entity.HasKey(e => e.UserName)
                    .HasName("PK__ADMIN__66DCF95D701EBD64");

                entity.ToTable("ADMIN");

                entity.Property(e => e.UserName)
                    .HasMaxLength(5000)
                    .IsUnicode(false)
                    .HasColumnName("userName");

                entity.HasOne(d => d.UserNameNavigation)
                    .WithOne(p => p.Admin)
                    .HasForeignKey<Admin>(d => d.UserName)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__ADMIN__userName__33D4B598");
            });

            modelBuilder.Entity<Appuser>(entity =>
            {
                entity.HasKey(e => e.UserName)
                    .HasName("PK__APPUSER__66DCF95DB9F6D351");

                entity.ToTable("APPUSER");

                entity.HasIndex(e => e.Oib, "UQ__APPUSER__CB394B3E3852281B")
                    .IsUnique();

                entity.Property(e => e.UserName)
                    .HasMaxLength(5000)
                    .IsUnicode(false)
                    .HasColumnName("userName");

                entity.Property(e => e.Birthday)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("birthday");

                entity.Property(e => e.Gender)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("gender");

                entity.Property(e => e.IsDisable).HasColumnName("isDisable");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.Oib)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("OIB");

                entity.Property(e => e.Smoker).HasColumnName("smoker");

                entity.Property(e => e.Surname)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("surname");

                entity.HasOne(d => d.UserNameNavigation)
                    .WithOne(p => p.Appuser)
                    .HasForeignKey<Appuser>(d => d.UserName)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__APPUSER__userNam__37A5467C");

                entity.HasMany(d => d.IdDescriptable)
                    .WithMany(p => p.UserNameNavigation)
                    .UsingEntity<Dictionary<string, object>>(
                        "Give",
                        l => l.HasOne<Review>().WithMany().HasForeignKey("IdDescriptable").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__give__idDescript__5441852A"),
                        r => r.HasOne<Appuser>().WithMany().HasForeignKey("UserName").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__give__userName__534D60F1"),
                        j =>
                        {
                            j.HasKey("UserName", "IdDescriptable").HasName("PK__give__F25BCE189CC51B40");

                            j.ToTable("give");

                            j.IndexerProperty<string>("UserName").HasMaxLength(5000).IsUnicode(false).HasColumnName("userName");

                            j.IndexerProperty<int>("IdDescriptable").HasColumnName("idDescriptable");
                        });

                entity.HasMany(d => d.IdDescriptableNavigation)
                    .WithMany(p => p.UserName1)
                    .UsingEntity<Dictionary<string, object>>(
                        "Report",
                        l => l.HasOne<Descriptable>().WithMany().HasForeignKey("IdDescriptable").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__report__idDescri__5812160E"),
                        r => r.HasOne<Appuser>().WithMany().HasForeignKey("UserName").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__report__userName__571DF1D5"),
                        j =>
                        {
                            j.HasKey("UserName", "IdDescriptable").HasName("PK__report__F25BCE187C3C95A9");

                            j.ToTable("report");

                            j.IndexerProperty<string>("UserName").HasMaxLength(5000).IsUnicode(false).HasColumnName("userName");

                            j.IndexerProperty<int>("IdDescriptable").HasColumnName("idDescriptable");
                        });
            });

            modelBuilder.Entity<Breed>(entity =>
            {
                entity.HasKey(e => e.IdPetType)
                    .HasName("PK__BREED__FA286CD183E7C391");

                entity.ToTable("BREED");

                entity.Property(e => e.IdPetType)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("idPetType");

                entity.Property(e => e.PetBreed)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("petBreed");

                entity.HasOne(d => d.IdPetTypeNavigation)
                    .WithOne(p => p.Breed)
                    .HasForeignKey<Breed>(d => d.IdPetType)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__BREED__idPetType__2B3F6F97");
            });

            modelBuilder.Entity<Card>(entity =>
            {
                entity.HasKey(e => e.UserName)
                    .HasName("PK__CARD__66DCF95D6E004CD4");

                entity.ToTable("CARD");

                entity.Property(e => e.UserName)
                    .HasMaxLength(5000)
                    .IsUnicode(false)
                    .HasColumnName("userName");

                entity.Property(e => e.Address)
                    .IsRequired()
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("address");

                entity.Property(e => e.CardNumber)
                    .IsRequired()
                    .HasMaxLength(160)
                    .IsUnicode(false)
                    .HasColumnName("cardNumber");

                entity.Property(e => e.CardType)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cardType");

                entity.Property(e => e.Cvv)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("CVV");

                entity.Property(e => e.ValidUntil)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("validUntil");

                entity.HasOne(d => d.UserNameNavigation)
                    .WithOne(p => p.Card)
                    .HasForeignKey<Card>(d => d.UserName)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__CARD__userName__5070F446");
            });

            modelBuilder.Entity<Descriptable>(entity =>
            {
                entity.HasKey(e => e.IdDescriptable)
                    .HasName("PK__DESCRIPT__4873745876473A04");

                entity.ToTable("DESCRIPTABLE");

                entity.Property(e => e.IdDescriptable).HasColumnName("idDescriptable");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("description");

                entity.Property(e => e.IsDisabled).HasColumnName("isDisabled");

                entity.Property(e => e.IsReported).HasColumnName("isReported");

                entity.Property(e => e.UserName)
                    .HasMaxLength(5000)
                    .IsUnicode(false)
                    .HasColumnName("userName");

                entity.HasOne(d => d.UserNameNavigation)
                    .WithMany(p => p.Descriptable)
                    .HasForeignKey(d => d.UserName)
                    .HasConstraintName("FK__DESCRIPTA__userN__3A81B327");
            });

            modelBuilder.Entity<Location>(entity =>
            {
                entity.HasKey(e => e.IdLocation)
                    .HasName("PK__LOCATION__76F46EFC91C18963");

                entity.ToTable("LOCATION");

                entity.Property(e => e.IdLocation).HasColumnName("idLocation");

                entity.Property(e => e.IsHouse).HasColumnName("isHouse");

                entity.Property(e => e.Latitude).HasColumnName("latitude");

                entity.Property(e => e.Level).HasColumnName("level");

                entity.Property(e => e.Longitude).HasColumnName("longitude");
            });

            modelBuilder.Entity<Messages>(entity =>
            {
                entity.HasKey(e => e.Idmessages)
                    .HasName("PK__MESSAGES__60C19C24B5BA2398");

                entity.ToTable("MESSAGES");

                entity.Property(e => e.Idmessages).HasColumnName("idmessages");

                entity.Property(e => e.Body)
                    .IsRequired()
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("body");

                entity.Property(e => e.IdPersonFrom).HasColumnName("idPersonFrom");

                entity.Property(e => e.IdPersonTo).HasColumnName("idPersonTo");

                entity.Property(e => e.Timestamp)
                    .HasColumnType("date")
                    .HasColumnName("timestamp");

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(5000)
                    .IsUnicode(false)
                    .HasColumnName("userName");

                entity.HasOne(d => d.UserNameNavigation)
                    .WithMany(p => p.Messages)
                    .HasForeignKey(d => d.UserName)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__MESSAGES__userNa__4D94879B");
            });

            modelBuilder.Entity<Period>(entity =>
            {
                entity.HasKey(e => e.IdPeriod)
                    .HasName("PK__PERIOD__41335B899CB6356F");

                entity.ToTable("PERIOD");

                entity.Property(e => e.IdPeriod).HasColumnName("idPeriod");

                entity.Property(e => e.EndDate)
                    .HasColumnType("date")
                    .HasColumnName("endDate");

                entity.Property(e => e.StartDate)
                    .HasColumnType("date")
                    .HasColumnName("startDate");
            });

            modelBuilder.Entity<Person>(entity =>
            {
                entity.HasKey(e => e.UserName)
                    .HasName("PK__PERSON__66DCF95D5A62AAAD");

                entity.ToTable("PERSON");

                entity.HasIndex(e => e.IdPerson, "UQ__PERSON__BAB33701613EA813")
                    .IsUnique();

                entity.Property(e => e.UserName)
                    .HasMaxLength(5000)
                    .IsUnicode(false)
                    .HasColumnName("userName");

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("email");

                entity.Property(e => e.IdPerson).HasColumnName("idPerson");

                entity.Property(e => e.MobileNumber)
                    .IsRequired()
                    .HasMaxLength(400)
                    .IsUnicode(false)
                    .HasColumnName("mobileNumber");

                entity.Property(e => e.Password)
                    .IsRequired()
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("password");

                entity.HasMany(d => d.Idmessages)
                    .WithMany(p => p.UserName1)
                    .UsingEntity<Dictionary<string, object>>(
                        "Recive",
                        l => l.HasOne<Messages>().WithMany().HasForeignKey("Idmessages").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__recive__idmessag__5BE2A6F2"),
                        r => r.HasOne<Person>().WithMany().HasForeignKey("UserName").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__recive__userName__5AEE82B9"),
                        j =>
                        {
                            j.HasKey("UserName", "Idmessages").HasName("PK__recive__30D0E09F74E15558");

                            j.ToTable("recive");

                            j.IndexerProperty<string>("UserName").HasMaxLength(5000).IsUnicode(false).HasColumnName("userName");

                            j.IndexerProperty<int>("Idmessages").HasColumnName("idmessages");
                        });
            });

            modelBuilder.Entity<Pet>(entity =>
            {
                entity.ToTable("PET");

                entity.HasIndex(e => e.PetId, "UQ__PET__DDF85078E95BB2E7")
                    .IsUnique();

                entity.Property(e => e.PetId).HasColumnName("petId");

                entity.Property(e => e.Age).HasColumnName("age");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("description");

                entity.Property(e => e.IdDescriptable).HasColumnName("idDescriptable");

                entity.Property(e => e.IdPetType).HasColumnName("idPetType");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(5000)
                    .IsUnicode(false)
                    .HasColumnName("userName");

                entity.HasOne(d => d.IdDescriptableNavigation)
                    .WithMany(p => p.Pet)
                    .HasForeignKey(d => d.IdDescriptable)
                    .HasConstraintName("FK__PET__idDescripta__48CFD27E");

                entity.HasOne(d => d.IdPetTypeNavigation)
                    .WithMany(p => p.Pet)
                    .HasForeignKey(d => d.IdPetType)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__PET__idPetType__4AB81AF0");

                entity.HasOne(d => d.UserNameNavigation)
                    .WithMany(p => p.Pet)
                    .HasForeignKey(d => d.UserName)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__PET__userName__49C3F6B7");
            });

            modelBuilder.Entity<Pettype>(entity =>
            {
                entity.HasKey(e => e.IdPetType)
                    .HasName("PK__PETTYPE__FA286CD15C336C08");

                entity.ToTable("PETTYPE");

                entity.Property(e => e.IdPetType).HasColumnName("idPetType");

                entity.Property(e => e.TypePetName)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("typePetName");
            });

            modelBuilder.Entity<Review>(entity =>
            {
                entity.HasKey(e => e.IdDescriptable)
                    .HasName("PK__REVIEW__487374588C4A3C22");

                entity.ToTable("REVIEW");

                entity.Property(e => e.IdDescriptable)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("idDescriptable");

                entity.Property(e => e.Grade).HasColumnName("grade");

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(5000)
                    .IsUnicode(false)
                    .HasColumnName("userName");

                entity.HasOne(d => d.IdDescriptableNavigation)
                    .WithOne(p => p.Review)
                    .HasForeignKey<Review>(d => d.IdDescriptable)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__REVIEW__idDescri__3D5E1FD2");

                entity.HasOne(d => d.UserName1)
                    .WithMany(p => p.Review)
                    .HasForeignKey(d => d.UserName)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__REVIEW__userName__3E52440B");
            });

            modelBuilder.Entity<Session>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SESSION");

                entity.Property(e => e.Expire)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("expire");

                entity.Property(e => e.IdSession)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("idSession");

                entity.Property(e => e.Info)
                    .IsRequired()
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("info");
            });

            modelBuilder.Entity<SiteContent>(entity =>
            {
                entity.HasKey(e => e.SiteContentId)
                    .HasName("PK__SiteCont__863DD7907B709BB1")
                    .IsClustered(false);

                entity.HasIndex(e => e.FileName, "IX_SiteContent_FileName");

                entity.HasIndex(e => new { e.FileName, e.Path }, "IX_SiteContent_FileName_Path");

                entity.HasIndex(e => e.ModifiedDate, "IX_SiteContent_ModifiedDate");

                entity.HasIndex(e => e.Path, "IX_SiteContent_Path");

                entity.Property(e => e.SiteContentId)
                    .HasColumnName("SiteContentID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.CacheProfile).HasMaxLength(50);

                entity.Property(e => e.ContentType)
                    .HasMaxLength(150)
                    .HasDefaultValueSql("('text/plain')");

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.FileName)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Path).HasMaxLength(200);

                entity.Property(e => e.RoleExceptions).HasMaxLength(200);

                entity.Property(e => e.Roles).HasMaxLength(200);

                entity.Property(e => e.Schedule).HasMaxLength(200);

                entity.Property(e => e.ScheduleExceptions).HasMaxLength(200);

                entity.Property(e => e.UserExceptions).HasMaxLength(200);

                entity.Property(e => e.Users).HasMaxLength(200);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}